#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

#define VCS_RTLIB_TLS_MODEL  __attribute__((tls_model("initial-exec")))

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned short US;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef unsigned long RP;
typedef unsigned long RO;
typedef unsigned long long ULL;
typedef U  GateCount;
typedef U  NodeCount;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef struct {
    U  I693;
    RP  I694;
} RmaReceiveClock1;
typedef NodeCount  FlatNodeNum;
typedef U  InstNum;
typedef unsigned ProcessNum;
typedef unsigned long long TimeStamp64;
typedef unsigned long long TimeStamp;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef TimeStamp  RmaTimeStamp;
typedef TimeStamp64  RmaTimeStamp64;
typedef struct {
    int * I695;
    long long I696;
} TypeData;
struct etype {
    U  I579 :8;
    U  I580 :24;
    U  I581;
    U  I582 :1;
    U  I583 :1;
    U  I584 :1;
    U  I585 :1;
    U  I586 :1;
    U  I587 :1;
    U  I588 :1;
    U  I589 :1;
    U  I590 :1;
    U  I591 :4;
    U  I592 :1;
    U  I593 :1;
    U  I594 :1;
    U  I595 :1;
    U  I596 :1;
    U  I597 :1;
    U  I598 :1;
    U  I599 :1;
    U  I600 :2;
    U  I601 :1;
    U  I602 :2;
    U  I603 :1;
    U  I604 :1;
    U  I605 :1;
    U  I606 :1;
    U  I607 :1;
    U  I364 :1;
    U  I608;
    TypeData  * I609;
    U  I610;
    U  I611;
    U  I612 :1;
    U  I613 :1;
    U  I614 :1;
    U  I615 :1;
    U  I616 :2;
    U  I617 :2;
    U  I618 :1;
    U  I619 :1;
    U  I620 :1;
    U  I621 :1;
    U  I622 :1;
    U  I623 :1;
    U  I624 :1;
    U  I625 :1;
    U  I626 :1;
    U  I627 :15;
};
typedef union {
    double I703;
    unsigned long long I704;
    unsigned  I705[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
typedef struct eblk {
    struct eblk * I712;
    E_fn  I713;
    struct iptmpl * I714;
    unsigned I716;
    unsigned I717;
    struct eblk * I718;
} eblk_struct;
typedef struct {
    RP  I712;
    RP  I713;
    RP  I714;
    unsigned I716;
    unsigned I717;
    RP  I718;
} RmaEblk;
typedef struct {
    RP  I712;
    RP  I713;
    RP  I714;
    unsigned I716;
    unsigned I717;
    RP  I718;
    unsigned val;
} RmaEblklq;
typedef union {
    double I703;
    unsigned long long I704;
    unsigned  I705[2];
} clock_struct;
typedef clock_struct  RmaClockStruct;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I754;
    RmaEblk  I711;
    U  I756;
    US  I757 :1;
    US  I758 :4;
    US  I181 :2;
    US  state :2;
    US  I760 :1;
    US  I761 :2;
    US  I762 :2;
    US  fHsim :1;
    US  I562 :1;
    scalar  newval;
    scalar  I765;
    RP  I766;
};
struct retain_t {
    struct retain_t * I754;
    EBLK  I711;
    U  I756;
    US  I757 :1;
    US  I758 :4;
    US  I181 :2;
    US  state :2;
    US  I760 :1;
    US  I761 :2;
    US  I762 :2;
    US  fHsim :1;
    US  I763 :1;
    scalar  newval;
    scalar  I765;
    void * I766;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I745;
    scalar  I746;
    scalar  I747;
    scalar  I748;
    scalar  fHsim :1;
    scalar  I181 :6;
    U  I750;
    EBLK  I751;
    void * I752;
    UP   I753[1];
};
struct RmaMPSched {
    RP  I745;
    scalar  I746;
    scalar  I747;
    scalar  I748;
    scalar  fHsim :1;
    scalar  I181 :6;
    U  I750;
    RmaEblk  I751;
    RP  I752;
    RP   I753[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I745;
    scalar  I746;
    scalar  I747;
    scalar  I748;
    scalar  I181;
    U  I750;
    RmaEblk  I751;
    scalar  I762;
    scalar  I771;
    scalar  I772;
    scalar  I773;
    U  I774;
    RmaClockStruct  I775;
    RmaClockStruct  I776;
    U  state;
    U  I777;
    RP  I714;
    RP  I778;
    RP  I779;
    RP   I753[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I781;
    void * I782;
};
typedef struct {
    RmaEblk  I711;
    RP  I783;
    scalar  I784;
    scalar  I762;
    scalar  I785;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I745;
    scalar  I746;
    scalar  I747;
    scalar  I748;
    scalar  fHsim :1;
    scalar  I181 :6;
    U  I750;
    RmaEblk  I751;
    scalar  I762;
    scalar  I771;
    scalar  I772;
    scalar  I773;
    U  state :4;
    U  I787 :28;
    RmaClockStruct  I775;
    RmaClockStruct  I776;
    RP  I788;
    RP  I714;
    RP  I789;
    RP   I753[1];
};
typedef struct red_t {
    U  I790;
    U  I791;
    U  I672;
} RED;
typedef struct predd {
    PD_e  I181;
    RED   I792[0];
} PREDD;
union rhs_value {
    vec32  I793;
    scalar  I784;
    vec32  * I762;
    double I794;
    U  I795;
};
typedef struct nbs_t {
    struct nbs_t * I796;
    struct nbs_t * I798;
    void (* I799)(struct nbs_t * I766);
    U  I800 :1;
    U  I801 :1;
    U  I802 :1;
    U  I803 :1;
    U  I804 :1;
    U  I805 :1;
    U  I806 :26;
    U  I807;
    void * I808;
    union rhs_value I809;
    vec32  I703;
    union {
        struct nbs_t * first;
        struct nbs_t * last;
    } I811;
} NBS;
typedef struct {
    RP  I812;
    RP  I778;
    RP  I714;
    RP  I779;
    RmaEblk  I711;
    RmaEblk  I813;
    RP  I814;
    scalar  I784;
    scalar  I762;
    char state;
    uscope_t  I815;
    U  I816;
    RP  I817;
    scalar  I771;
    scalar  I772;
    scalar  I773;
    RmaClockStruct  I775;
    RmaClockStruct  I776;
    RP  I752;
} RmaPulse;
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2,
    QIRDSpiceModuleC = 3
} QIRDModuleType;
typedef struct {
    U  I821 :1;
    U  I822 :1;
    U  I823 :1;
    U  I824 :1;
    U  I825 :1;
    U  I826 :1;
    U  I827 :1;
    U  I828 :1;
    U  I829 :1;
    U  I830 :1;
    U  I831 :1;
    U  I832 :1;
    U  I833 :1;
    U  I834 :1;
    U  I835 :1;
    U  I836 :1;
    U  I837 :1;
    U  I838 :1;
    QIRDModuleType  I839 :2;
    U  I840 :1;
    U  I841 :1;
    U  I842 :1;
    U  I843 :1;
    U  I844 :1;
    U  I845 :1;
    U  I846 :1;
    U  I847 :1;
    U  I848 :1;
    U  I849 :1;
    U  I850 :1;
    U  I851 :1;
    U  I852 :1;
    U  I853 :1;
    U  I854 :1;
    U  I855 :1;
    U  I856 :1;
    U  I857 :1;
} BitFlags;
struct qird {
    US  I4;
    US  I5;
    U  I6;
    U  I7;
    char * I8;
    char * I9;
    U  * I10;
    char * I11;
    char * I12;
    U  I13;
    U  I14;
    struct vcd_rt * I15;
    U  I17;
    struct _vcdOffset_rt * I18;
    U  I20;
    U  I21;
    U  * I22;
    U  * I23;
    void * I24;
    void * I25;
    U  I26;
    int I27;
    UP  I28;
    U  I29;
    U  I30;
    U  I31;
    UP  I32;
    U  * I33;
    UP  I34;
    U  I35;
    BitFlags  I36;
    U  I37;
    U  I38;
    U  I39;
    U  I40;
    U  I41;
    U  * I42;
    U  I43;
    U  * I44;
    U  I45;
    U  I46;
    U  I47;
    U  I48;
    U  I49;
    U  I50;
    U  I51;
    U  * I52;
    U  * I53;
    U  I54;
    U  I55;
    U  * I56;
    U  I57;
    U  * I58;
    U  I59;
    U  I60;
    U  I61;
    U  I62;
    U  * I63;
    U  I64;
    U  * I65;
    U  I66;
    U  I67;
    U  I68;
    U  I69;
    U  I70;
    U  I71;
    U  * I72;
    char * I73;
    U  I74;
    U  I75;
    U  I76;
    U  I77;
    U  I78;
    U  * I79;
    U  I80;
    U  I81;
    U  I82;
    UP  * I83;
    U  I84;
    U  I85;
    U  I86;
    U  I87;
    U  I88;
    U  I89;
    U  * I90;
    U  I91;
    U  I92;
    U  * I93;
    U  * I94;
    U  * I95;
    U  * I96;
    U  * I97;
    U  I98;
    U  I99;
    struct taskInfo * I100;
    U  I102;
    U  I103;
    U  I104;
    int * I105;
    U  * I106;
    UP  * I107;
    U  * I108;
    U  I109;
    U  I110;
    U  I111;
    U  I112;
    U  I113;
    struct qrefer * I114;
    U  * I116;
    unsigned * I117;
    void * I118;
    U  I119;
    U  I120;
    struct classStaticReferData * I121;
    U  I123;
    U  * I124;
    U  I125;
    U  * I126;
    U  I127;
    struct wakeupInfoStruct * I128;
    U  I130;
    U  I131;
    U  I132;
    U  * I133;
    U  I134;
    U  * I135;
    U  I136;
    U  I137;
    U  I138;
    U  * I139;
    U  I140;
    U  * I141;
    U  I142;
    U  I143;
    U  * I144;
    U  I145;
    U  I146;
    U  * I147;
    U  * I148;
    U  * I149;
    U  I150;
    U  I151;
    U  I152;
    U  I153;
    U  I154;
    struct qrefee * I155;
    U  * I157;
    U  I158;
    struct qdefrefee * I159;
    U  * I161;
    int (* I162)(void);
    char * I163;
    U  I164;
    U  I165;
    void * I166;
    void * I167;
    NumLibs_t  I168;
    char * I169;
    U  * I170;
    U  I171;
    U  I172;
    U  I173;
    U  I174;
    U  I175;
    U  * I176;
    U  * I177;
    int I178;
    struct clock_load * I179;
    int I194;
    struct clock_data * I195;
    int I211;
    struct clock_hiconn * I212;
    U  I216;
    U  I217;
    U  I218;
    U  I219;
    U  * I220;
    U  * I221;
    U  I222;
    void * I223;
    U  I224;
    U  I225;
    UP  * I226;
    void * I227;
    U  I228;
    UP  * I229;
    U  * I230;
    int (* I231)(void);
    U  * I232;
    UP  * I233;
    U  * I234;
    U  I235 :1;
    U  I236 :31;
    U  I237;
    U  I238;
    UP  * I239;
    U  * I240;
    U  I241 :1;
    U  I242 :1;
    U  I243 :1;
    U  I244 :1;
    U  I245 :28;
    U  I246;
    U  I247;
    U  I248;
    U  I249 :31;
    U  I250 :1;
    UP  * I251;
    UP  * I252;
    U  * I253;
    U  * I254;
    U  * I255;
    UP  * I256;
    UP  * I257;
    UP  * I258;
    U  * I259;
    UP  * I260;
    UP  * I261;
    UP  * I262;
    UP  * I263;
    char * I264;
    U  I265;
    U  I266;
    U  I267;
    UP  * I268;
    U  I269;
    UP  * I270;
    UP  * I271;
    UP  * I272;
    UP  * I273;
    UP  * I274;
    UP  * I275;
    UP  * I276;
    UP  * I277;
    UP  * I278;
    UP  * I279;
    UP  * I280;
    UP  * I281;
    UP  * I282;
    U  * I283;
    U  * I284;
    UP  * I285;
    U  I286;
    U  I287;
    U  I288;
    U  I289;
    U  I290;
    U  I291;
    U  I292;
    U  I293;
    char * I294;
    U  * I295;
    U  I296;
    U  I297;
    U  I298;
    U  I299;
    U  I300;
    UP  * I301;
    UP  * I302;
    UP  * I303;
    UP  * I304;
    struct daidirInfo * I305;
    struct vcs_tftable * I307;
    U  I309;
    UP  * I310;
    UP  * I311;
    U  I312;
    U  I313;
    U  I314;
    UP  * I315;
    U  * I316;
    UP  * I317;
    struct qird_hil_data * I318;
    UP  (* I320)(void);
    UP  (* I321)(void);
    UP  (* I322)(void);
    UP  (* I323)(void);
    UP  (* I324)(void);
    int * I325;
    int (* I326)(void);
    char * I327;
    UP  * I328;
    UP  * I329;
    UP  (* I330)(void);
    int (* I331)(void);
    int * I332;
    int (* I333)(void);
    int * I334;
    char * I335;
    U  * I336;
    U  * I337;
    U  * I338;
    U  * I339;
    void * I340;
    U  I341;
    void * I342;
    U  I343;
    U  I344;
    U  I345;
    U  I346;
    U  I347;
    U  I348;
    UP  * I349;
    U  * I350;
    U  * I351;
    U  I352 :15;
    U  I353 :14;
    U  I354 :1;
    U  I355 :1;
    U  I356 :1;
    U  I357 :3;
    U  I358 :1;
    U  I359 :1;
    U  I360 :17;
    U  I361 :3;
    U  I362 :5;
    U  I363 :1;
    U  I364 :1;
    U  I365 :1;
    U  I366 :31;
    struct scope * I367;
    U  I369;
    U  I370;
    U  I371;
    U  * I372;
    U  * I373;
    U  * I374;
    U  I375;
    U  I376;
    U  I377;
    struct pcbt * I378;
    U  I388;
    U  I389;
    U  I390;
    U  I391;
    void * I392;
    void * I393;
    void * I394;
    int I395;
    U  * I396;
    U  I397;
    U  I398;
    U  I399;
    U  I400;
    U  I401;
    U  I402;
    U  I403;
    void * I404;
    UP  * I405;
    U  I406;
    U  I407;
    void * I408;
    U  I409;
    void * I410;
    U  I411;
    void * I412;
    U  I413;
    int (* I414)(void);
    int (* I415)(void);
    void * I416;
    void * I417;
    void * I418;
    U  I419;
    U  I420;
    U  I421;
    U  I422;
    U  I423;
    U  I424;
    char * I425;
    U  I426;
    U  * I427;
    U  I428;
    U  * I429;
    U  I430;
    U  I431;
    U  I432;
    U  I433;
    U  I434;
    U  I435;
    U  * I436;
    U  I437;
    U  I438;
    U  * I439;
    U  I440;
    U  I441;
    U  I442;
    U  * I443;
    char * I444;
    U  I445;
    U  I446;
    U  I447;
    U  I448;
    U  * I449;
    U  * I450;
    U  I451;
    U  * I452;
    U  * I453;
    U  I454;
    U  I455;
    U  I456;
    UP  * I457;
    U  I458;
    U  I459;
    U  I460;
    struct cosim_info * I461;
    U  I463;
    U  * I464;
    U  I465;
    void * I466;
    U  I467;
    U  * I468;
    U  I469;
    U  * I470;
    U  I471;
    U  I472;
    U  * I473;
    U  I474;
    U  * I475;
    U  I476;
    U  * I477;
    U  I478;
    U  I479;
    U  I480;
    U  I481;
    U  I482;
    U  I483;
    U  I484;
    U  I485;
    U  I486;
    U  * I487;
    U  * I488;
    void (* I489)(void);
    U  * I490;
    UP  * I491;
    struct mhdl_outInfo * I492;
    UP  * I494;
    U  I495;
    UP  * I496;
    U  I497;
    void * I498;
    U  * I499;
    void * I500;
    char * I501;
    int (* I502)(void);
    U  * I503;
    char * I504;
    char * I505;
    U  I506;
    U  * I507;
    char * I508;
    U  I509;
    struct regInitInfo * I510;
    UP  * I512;
    U  * I513;
    char * I514;
    U  I515;
    U  I516;
    U  I517;
    U  I518;
    U  I519;
    U  I520;
    U  I521;
    U  I522;
    UP  * I523;
    U  I524;
    U  I525;
    U  I526;
    U  I527;
    UP  * I528;
    U  I529;
    UP  * I530;
    U  I531;
    U  I532;
    U  I533;
    U  * I534;
    U  I535;
    U  I536;
    U  I537;
    U  * I538;
    U  * I539;
    UP  * I540;
    UP  * I541;
    void * I542;
    UP  I543;
    void * I544;
    void * I545;
    void * I546;
    void * I547;
    void * I548;
    UP  I549;
    U  * I550;
    U  * I551;
    void * I552;
    U  I553 :1;
    U  I554 :31;
    U  I555;
    U  I556;
    U  I557;
    int I558;
    U  I559 :1;
    U  I560 :1;
    U  I561 :1;
    U  I562 :29;
    void * I563;
    void * I564;
    void * I565;
    void * I566;
    void * I567;
    UP  * I568;
    U  * I569;
    U  I570;
    char * I571;
    U  * I572;
    U  * I573;
    char * I574;
    int * I575;
    UP  * I576;
    struct etype * I577;
    U  I628;
    U  I629;
    U  I630;
    U  * I631;
    void * I632;
    U  I633;
    U  I634;
    void * I635;
    U  I636;
    U  I637;
    U  * I638;
    U  * I639;
    char * I640;
    U  I641;
    struct covreg_rt * I642;
    U  I644;
    U  I645;
    U  * I646;
    U  I647;
    U  * I648;
    U  I649;
    U  I650;
    U  * I651;
};
typedef struct pcbt {
    U  * I380;
    UP  I381;
    U  I382;
    U  I383;
    U  I384;
    U  I385;
    U  I386;
    U  I387;
} PCBT;
struct iptmpl {
    QIRD  * I719;
    struct vcs_globals_t * I720;
    void * I722;
    UP  I723;
    UP  I724;
    struct iptmpl * I714[2];
};
typedef unsigned long long FileOffset;
typedef struct _RmaMultiInputTable {
    U  I864 :1;
    U  I865 :1;
    U  I659 :2;
    U  I660 :4;
    U  I661 :5;
    U  I866 :1;
    U  I867 :1;
    U  I868 :1;
    U  I869 :1;
    U  I870 :1;
    U  I871 :1;
    U  I872;
    U  I873;
    U  I203;
    U  I874;
    U  I875 :1;
    U  I876 :31;
    union {
        U  utable;
        U  edgeInputNum;
    } I686;
    U  I877 :4;
    U  I878 :4;
    U  I879 :4;
    U  I880 :4;
    U  I881 :4;
    U  I882 :4;
    U  I883 :1;
    U  I884 :1;
    U  I885 :1;
    U  I364 :5;
    HsimExprChar  * I886;
    UB  * I887;
    UB  * I888;
    struct _RmaMultiInputTable * I863;
    struct _RmaMultiInputTable * I890;
} RmaMultiInputTable;
typedef struct _HsCgPeriod {
    U  I936;
    U  I937;
} HsCgPeriod;
typedef struct {
    U   I938[2];
    U  I939 :1;
    U  I940 :1;
    U  I941 :8;
    U  I942 :8;
    U  I943 :8;
    U  I944 :4;
    U  I945 :1;
    U  I946 :1;
    unsigned long long I947;
    unsigned long long I948;
    unsigned long long I949;
    unsigned long long I950;
    unsigned long long I937;
    U  I936;
    U  I951;
    U  I952;
    U  I953;
    U  I954;
    U  I955;
    HsCgPeriod  * I956[10];
} HsimSignalMonitor;
typedef struct {
    FlatNodeNum  I957;
    InstNum  I958;
    U  I896;
    scalar  I959;
    UB  I960;
    UB  I961;
    UB  I962;
    UB  I963;
    U  I964;
    U  I965;
    U  I966;
    U  I967;
    U  I968;
    U  I969;
    U  I970;
    U  I971;
    U  I972;
    HsimSignalMonitor  * I973;
    RP  I974;
    RmaTimeStamp64  I975;
    U  I976;
    RmaTimeStamp64  I977;
    U  I978;
    UB  I979;
} HsimNodeRecord;
typedef struct {
    RP  I980;
    RP  I714;
} RmaIbfIp;
typedef struct {
    RP  I980;
    RP  pcode;
} RmaIbfPcode;
typedef struct {
    RmaEblk  I711;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RO  I860;
    RP  pcode;
} SchedGateFanout;
typedef struct {
    RO  I860;
    RP  pcode;
    U   I917[4];
} SchedSelectGateFanout;
typedef struct {
    RP  pcode;
    RmaEblklq  I711;
} SchedGateEblk;
typedef struct {
    RP  pcode;
    RmaEblklq  I711;
    UB  * I981;
} SchedSelectGateEblk;
typedef struct {
    RP  I982;
    RP  pfn;
    RP  pcode;
} RmaSeqPrimOutputEblkData;
typedef struct {
    RmaEblk  I711;
    RP  I983;
} RmaAnySchedSampleSCg;
typedef struct {
    RmaEblk  I711;
    RP  I981;
    RP  I983;
    vec32  I984;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I711;
    RP  I981;
    RP  I983;
    vec32   I761[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I711;
    RP  I981;
    RP  I983;
    scalar   I985[1];
} RmaAnySchedECg;
typedef struct {
    U  I986;
    U  I699;
    U  I896;
    U  I987;
    RmaIbfIp  * I988;
    EBLK  I711;
    void * val;
} RmaThreadSchedCompiledLoads;
typedef struct {
    U  I699;
    U  I707;
    RmaThreadSchedCompiledLoads  * I989;
} RmaSchedCompileLoadsCg;
typedef struct {
    RP  I990;
} RmaRootCbkCg;
typedef struct {
    RP  I991;
} RmaRootVcdCg;
typedef struct {
    RP  I992;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I711;
    RP  I993;
} RmaForceCbkJmpCg;
typedef struct {
    U  I5;
    U  I707 :30;
    U  I994 :1;
    U  I995 :1;
    vec32  I793;
    U  I996;
    RP  I997;
    RP  I998;
} RmaForceSelectorV;
typedef struct {
    U  I5;
    RmaIbfPcode  I1004;
} RmaNetTypeDriverGate;
typedef struct {
    U  I5;
    U  I655;
    RmaIbfPcode   I1004[1];
} RmaNetTypeScatterGate;
typedef struct {
    U  I5;
    RmaIbfPcode  I1004;
} RmaNetTypeGatherGate;
typedef struct {
    RmaIbfPcode  I1005;
    U  I1006 :3;
    U  I1007 :1;
    U  I1008 :1;
    U  I873 :16;
} RmaNbaGateOfn;
typedef struct {
    U  I5;
    NBS  I1009;
    RmaIbfPcode  I1005;
} RmaNbaGate1;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  pcode;
} Rma1InputGateFaninCgS;
typedef struct RmaSeqPrimOutputS_ RmaSeqPrimOutputOnClkS;
struct RmaSeqPrimOutputS_ {
    RP  pfn;
    RP  I1012;
    U  state;
    U  I1013;
    RP  I1014;
    U  I693;
    scalar  val;
};
typedef struct {
    U  I5;
    U  iinput;
    UB  I1016;
    RP  I1017;
} RmaCondOptLoad;
typedef struct {
    U  I5;
    U  iinput;
    UB  I1016;
    RP  I1017;
} RmaMacroStateUpdate;
typedef struct {
    U  I5;
    U  state;
    U  I1018;
    UB  I1016;
    U  * I1019;
} RmaMacroState;
typedef struct {
    U  iinput;
    RP  I1020;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I1020;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RmaEblk  I711;
    RP  pcode;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I711;
    RP  pcode;
    RP  pfn;
} RmaUdpDeltaGateCg;
typedef struct {
    RmaEblk  I711;
    RP  pcode;
    RP  pfn;
    scalar  I1021;
} RmaSchedDeltaGateCg;
typedef struct {
    UB  I1022;
    RP  I1023;
    RP  I1024;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I711;
    RP  pcode;
    U  I896;
    U   I700[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I5;
    RP  I792;
    RmaEblk  I711;
    RmaIbfPcode  I1005;
} RmaGateDelay;
typedef struct {
    U  I5;
    RP  I792;
    RmaEblk  I711;
    RmaIbfPcode  I1005;
} RmaGateBehavioralDelay;
typedef struct {
    U  I5;
    union {
        RP  I1249;
        RP  I1530;
        RP  I1543;
    } I766;
    RmaIbfPcode  I1005;
} RmaMPDelay;
typedef struct {
    U  I5;
    RmaPulse  I1025;
    RmaIbfPcode  I1005;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I5;
    RmaIbfPcode  I1005;
    RmaMps  I1026;
} RmaMPHybridDelay;
typedef struct {
    U  I5;
    U  I1027;
    RmaIbfPcode  I1005;
    RmaEblk  I751;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I5;
    RmaIbfPcode  I1005;
    RmaMpspNewCsdf  I1028;
} RmaMPPulseDelay;
typedef struct {
    U  I5;
    RmaMpsp  I1028;
    RmaIbfPcode  I1005;
} RmaMPPulseOptHybridDelay;
typedef struct _RmaBehavioralTransportDelay {
    U  I5;
    RP  I672;
    RmaTransEventHdr  I902;
    RP  I789;
    RmaIbfPcode  I1005;
} RmaBehavioralTransportDelayS;
typedef struct {
    U  I5;
    U  I672;
    RmaTransEventHdr  I902;
    RP  I789;
    RmaIbfPcode  I1005;
} RmaNtcTransDelay;
typedef struct {
    U  I5;
    U  I672;
    RmaEblk  I711;
    RmaIbfPcode  I1005;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I711;
    RmaIbfPcode  I1005;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I5;
    U  I1029;
    U  I1030;
    RmaTransEventHdr  I902;
    RP  I789;
    RmaIbfPcode  I1005;
} RmaNtcTransDelayRF;
typedef struct {
    U  I5;
    U  I1029;
    U  I1030;
    RmaEblk  I711;
    RmaIbfPcode  I1005;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I5;
    RP  I1031;
    RmaTransEventHdr  I902;
    RP  I789;
    RmaIbfPcode  I1005;
} RmaICTransDelay;
typedef struct {
    U  I5;
    RP  I1031;
    RmaEblk  I711;
    RmaIbfPcode  I1005;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I711;
    RmaIbfPcode  I1005;
} RmaICTransZeroDelay;
typedef struct {
    U  I5;
    RP  I792;
    RmaEblk  I711;
    RmaIbfPcode  I1005;
} RmaICSimpleDelay;
typedef struct {
    U  I5;
    union {
        RP  psimple;
        RP  I1530;
        RP  I1543;
    } I766;
    RmaIbfPcode  I1005;
} RmaICDelay;
typedef struct {
    U  I5;
    RP  I792;
    RmaEblk  I711;
    RmaIbfPcode  I1005;
} RmaPortDelay;
typedef struct {
    U  I5;
    RP   I1035[(4)];
} RmaRtlXEdgesHdr;
typedef struct {
    U  I5;
    US  I1036;
    US  I364;
    RP  I1037;
    RP  I1038;
    RP  I1039;
} RmaRtlEdgeBlockHdr;
typedef struct {
    RP  I1040;
    RP  I1041;
} RemoteDbsedLoad;
typedef struct {
    RmaEblk  I711;
    RP  I1042;
    RP  I1043;
    U  I1044 :16;
    U  I1045 :2;
    U  I1046 :2;
    U  I364 :12;
    U  I467;
    RP  I1047;
    RP   I796[(4)];
    RP   I798[(4)];
    RemoteDbsedLoad   I1048[1];
} RmaRtlEdgeBlock;
typedef struct TableAssign_ {
    struct TableAssign_ * I863;
    struct TableAssign_ * I783;
    U  I5;
    U  I1050 :1;
    U  I1051 :1;
    U  I1052 :2;
    U  I1053 :1;
    U  I693 :8;
    U  I1054 :1;
    U  I1055 :1;
    U  I1056 :1;
    U  I1057 :1;
    U  I364 :15;
    RP  ptable;
    RP  I1020;
} TableAssign;
typedef struct TableAssignLayoutOnClk_ {
    struct TableAssignLayoutOnClk_ * I863;
    struct TableAssignLayoutOnClk_ * I783;
    U  I5;
    U  I1050 :1;
    U  I1051 :1;
    U  I1052 :2;
    U  I1053 :1;
    U  I693 :8;
    U  I1054 :1;
    U  I1055 :1;
    U  I1056 :1;
    U  I1057 :1;
    U  I364 :15;
    RP  ptable;
    RmaSeqPrimOutputOnClkS  I1059;
    RmaEblk  I711;
} TableAssignLayoutOnClk;
typedef struct {
    RP  pfn;
    U  state;
    U  I1060;
} RmaSeqPrimOutputOnClkOpt;
typedef struct TableAssignLayoutOnClkOpt_ {
    struct TableAssignLayoutOnClkOpt_ * I863;
    struct TableAssignLayoutOnClkOpt_ * I783;
    U  I5;
    U  I1050 :1;
    U  I1051 :1;
    U  I1052 :2;
    U  I1053 :1;
    U  I693 :8;
    U  I1054 :1;
    U  I1055 :1;
    U  I1056 :1;
    U  I1057 :1;
    U  I364 :15;
    U  I1062;
    RmaSeqPrimOutputOnClkOpt  I1059;
    RmaSeqPrimOutputEblkData  I1063;
} TableAssignLayoutOnClkOpt;
typedef struct {
    U  I5;
    RP  I783;
    RP  I1064;
} RmaTableAssignList;
typedef struct {
    U  I5;
    RP  I783;
    RP  I1064;
    RP  I1065;
    RP  I1014;
    US  I693;
    UB  I959;
    UB  I1066;
    UB  I1067;
    UB  I757;
    RP   I1068[0];
} RmaThreadTableAssignList;
typedef struct {
    RP  I1065;
    RP  I1014;
    US  I693;
    UB  I959;
    UB  I1066;
    UB  I1067;
    UB  I757;
} RmaThreadTableHeader;
typedef struct {
    RP  I1040;
} RmaWakeupListCg;
typedef struct {
    RP  I1040;
} RmaWakeupArrayCg;
typedef struct {
    RP  I1040;
    RP  I1069;
} RmaPreCheckWakeupListCg;
typedef struct {
    RP  I1040;
    RP  I1069;
} RmaPreCheckWakeupArrayCg;
typedef struct {
    U  I1070;
    U  I693;
    RmaTimeStamp   I1071[1];
} RmaTsArray;
typedef struct {
    U  iinput;
    RP  I1072;
} RmaConditionsMdb;
typedef struct {
    RP  I1073;
    RP  I1074;
    U  I1075;
} RmaTcListHeader;
typedef struct {
    RP  I863;
    RP  I1076;
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
} RmaTcCoreSimple;
typedef struct {
    RP  I863;
    RP  I1076;
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
    RP  I1087;
} RmaTcCoreConditional;
typedef struct {
    RP  I863;
    RP  I1076;
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
    RP  I1087;
    RP  I1088;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I863;
    RP  I1076;
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
    RP  I1088;
    RP  I1089;
    U  I1090;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
    RP  I1012;
} RmaTcCoreSimpleNoListMdb;
typedef struct {
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
    RP  I1087;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
    RP  I1087;
    RP  I1088;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
    RP  I1088;
    RP  I1089;
    U  I1090;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
    RP  I1088;
    RP  I1089;
    RP  I1012;
    U  I1090;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoListMdb;
typedef struct {
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
    RP  I1087;
    RP  I1012;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I1077;
    RP  I706;
    U  I1078;
    scalar  I873;
    scalar  I1079;
    US  I1080 :1;
    US  I1081 :1;
    US  I1082 :1;
    US  I1083 :1;
    US  I1084 :1;
    US  I1085 :1;
    US  I1086 :5;
    U  I1092;
    RP  I1093;
    RP  I1094;
    RP  I1087;
    RP  I1095;
    RP  I1096;
    RmaTimeStamp  I1097;
} RmaTcCoreNochange;
typedef struct {
    RP  I1098;
    RP  I863;
} RmaTcCoreNochangeList;
typedef struct {
    RP  I1072;
    RmaTimeStamp  I1099;
    scalar  I1100;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I863;
    RP  I1072;
    RmaTimeStamp  I1099;
    scalar  I1100;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I1099;
    scalar  I1100;
    US  I873;
    RP  I1088;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I863;
    RmaTimeStamp  I1099;
    scalar  I1100;
    US  I873;
    RP  I1088;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I1088;
    RP  I1101;
    U  I1090;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I1012;
    RP  I1088;
    RP  I1101;
    U  I1090;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoListMdb;
typedef struct {
    RP  I863;
    RP  I1088;
    RP  I1101;
    U  I1090;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I1102;
    U  I1103;
    FlatNodeNum  I1104;
    U  I896;
    U  I1105;
    U  I1106;
    RmaIbfPcode  I1005;
    union {
        scalar  I1107;
        vec32  I1108;
        scalar  * I1109;
        vec32  * I1110;
    } val;
} RmaScanSwitchData;
typedef struct {
    RP  I863;
    RP  I783;
    RP  I1111;
} RmaDoublyLinkedListElem;
typedef struct {
    RP  I1112;
    U  I1113 :1;
    U  I1114 :1;
    U  I1115 :1;
    U  I1116 :4;
    U  I364 :25;
    U  I1117;
} RmaSwitchGateInCbkListInfo;
typedef struct {
    union {
        RmaDoublyLinkedListElem  I1591;
        RmaSwitchGateInCbkListInfo  I2;
    } I686;
    RmaIbfPcode  I1005;
} RmaSwitchGate;
typedef struct RmaNonEdgeLoadData1_ {
    US  I1118;
    scalar  val;
    scalar  I1119 :1;
    scalar  I1120 :1;
    scalar  I1121 :1;
    scalar  I1122 :1;
    scalar  I1123 :1;
    RP  I796;
    RP  I1124;
    RP  I1104;
    RP  I1125;
    RP  I1126;
} RmaNonEdgeLoadData1;
typedef struct RmaNonEdgeLoadHdr1_ {
    UB  I1119;
    UB  I1127;
    RmaNonEdgeLoadData1  * I1035;
    RmaNonEdgeLoadData1  * I783;
    void * I1128;
} RmaNonEdgeLoadHdr1;
typedef struct RmaChildClockProp_ {
    RP  I796;
    RP  I1129;
    RP  I1104;
    RP  pcode;
    scalar  val;
} RmaChildClockProp;
typedef struct RmaChildClockPropList1_ {
    RmaChildClockProp  * I1035;
    RmaChildClockProp  * I783;
} RmaChildClockPropList1;
typedef struct {
    U  I5;
    U  I1130;
} RmaHDLCosimDUTGate;
struct clock_load {
    U  I181 :5;
    U  I182 :12;
    U  I183 :1;
    U  I184 :2;
    U  I185 :1;
    U  I186 :1;
    U  I187 :1;
    U  I188 :9;
    U  I189;
    U  I190;
    void (* pfn)(void * I192, char val);
};
typedef struct clock_data {
    U  I197 :1;
    U  I198 :1;
    U  I199 :1;
    U  I200 :1;
    U  I181 :5;
    U  I182 :12;
    U  I201 :6;
    U  I202 :1;
    U  I184 :2;
    U  I185 :1;
    U  I188 :1;
    U  I203;
    U  I204;
    U  I205;
    U  I189;
    U  I206;
    U  I207;
    U  I208;
    U  I209;
    U  I210;
} HdbsClockData;
struct clock_hiconn {
    U  I214;
    U  I215;
    U  I189;
    U  I184;
};
typedef struct _RmaDaiCg {
    RP  I1131;
    RP  I1132;
    U  I1133;
} RmaDaiCg;
typedef union _RmaCbkMemOptUnion {
    RP  I1131;
    RP  I1134;
    RP  I1135;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I1136;
} RmaDaiOptCg;
struct futq_slot2 {
    U  I743;
    U   I744[32];
};
struct futq_slot1 {
    U  I740;
    struct futq_slot2  I741[32];
};
struct futq_info {
    scalar  * I735;
    U  I736;
    U  I737;
    struct futq_slot1  I738[32];
};
struct futq {
    struct futq * I725;
    struct futq * I727;
    RmaEblk  * I728;
    RmaEblk  * I729;
    U  I716;
    U  I1;
};
struct sched_table {
    struct futq * I730;
    struct futq I731;
    struct hash_bucket * I732;
    struct hash_bucket * I734;
};
struct dummyq_struct {
    clock_struct  I1140;
    EBLK  * I1141;
    EBLK  * I1142;
    EBLK  * I1143;
    struct futq * I1144;
    struct futq * I1145;
    struct futq * I1146;
    struct sched_table * I1147;
    struct futq_info * I1149;
    struct futq_info * I1151;
    U  I1152;
    U  I1153;
    U  I1154;
    U  I1155;
    U  I1156;
    U  I1157;
    U  I1158;
    struct millenium * I1159;
    EBLK  * I1161;
    EBLK  * I1162;
    EBLK  * I1163;
    EBLK  * I1164;
    EBLK  * I1165;
    EBLK  * I1166;
    EBLK  * I1167;
    EBLK  * I1168;
    EBLK  * I1169;
    EBLK  * I1170;
    EBLK  * I1171;
    EBLK  * I1172;
    EBLK  * I1173;
    EBLK  * I1174;
    EBLK  * I1175;
    EBLK  * I1176;
    EBLK  * I1177;
    EBLK  * I1178;
    MPS  * I1179;
    struct retain_t * I1180;
    EBLK  * I1181;
    EBLK  * I1182;
    EBLK  * I1183;
    EBLK  * I1184;
    EBLK  * I1185;
    EBLK  * I1186;
    EBLK  * I1187;
    EBLK  * I1188;
    EBLK  * I1189;
    EBLK  * I1190;
    EBLK  * I1191;
    EBLK  * I1192;
    EBLK  * I1193;
    EBLK  * I1194;
    EBLK  * I1195;
    EBLK  * I1196;
    EBLK  * I1197;
    EBLK  * I1198;
    EBLK  * I1199;
    EBLK  * I1200;
    EBLK  * I1201;
    EBLK  * I1202;
    EBLK  * I1203;
    EBLK  * I1204;
    EBLK  * I1205;
    EBLK  * I1206;
    EBLK  I1207;
    EBLK  * I1208;
    EBLK  * I1209;
    EBLK  * I1210;
    EBLK  * I1211;
    int I1212;
    int I1213;
    struct vcs_globals_t * I1214;
    clock_struct  I1215;
    unsigned long long I1216;
    EBLK  * I1217;
    EBLK  * I1218;
    void * I1219;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPFA)(UB  *  , UB  *  , U   , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef void (* FPNTYPE_L)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_H)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_LPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_HPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef struct _lqueue {
    EBLK  * I712;
    EBLK  * I1220;
    int I1221;
    struct _lqueue * I754;
} Queue;
typedef struct {
    void * I1223;
    void * I1224;
    void * I1225;
    void * I1226;
    void * I1227;
} ClkLevel;
typedef struct {
    unsigned long long I1228;
    EBLK  I1229;
    U  I1230;
    U  I1231;
    union {
        void * pHeap;
        Queue  * pList;
    } I686;
    unsigned long long I1232;
    ClkLevel  I1233;
    Queue   I1234[1];
} Qhdr;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   X2val[];
extern UB   XcvtstrTR[];
extern UB   Xcvtstr[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern __thread unsigned long long vcs_clocks;
extern UB   Xunion[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern FP   rmaFunctionArray[];
extern UP   rmaFunctionRtlArray[];
extern FP   rmaFunctionLRArray[];
extern U  rmaFunctionCount;
extern U  rmaFunctionLRCount;
extern U  rmaFunctionLRDummyCount;
extern UP  rmaFunctionDummyEndPtr;
extern __thread UB  dummyScalar;
extern __thread UB  fScalarIsForced;
extern __thread UB  fScalarIsReleased;
extern U  fNotimingchecks;
extern U  fFsdbDumpOn;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedFnSamplePtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern UB  * ptableGbl;
extern U  * vcs_ptableOffsetsGbl;
extern UB  * expandedClkValues;
extern __thread Qhdr  * lvlQueue;
extern __thread unsigned threadIndex;
extern int cPeblkThreads;
extern US   xedges[];
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern U  fEveBusPullVal;
extern U  fEveBusPullFlag;
extern U  fFutEventPRL;
extern U  fParallelEBLK;
extern U  fBufferingEvent;
extern __thread UB  fNettypeIsForced;
extern __thread UB  fNettypeIsReleased;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;
extern US  * edgeActionT;
extern unsigned long long * derivedClk;
extern U  fHashTableSize;
extern U  fSkipStrChangeOnDelay;
extern U  fHsimTcheckOpt;
extern scalar   edgeChangeLookUp[4][4];
extern U  fDoingTime0Prop;
extern U  fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U  fLoopReportRT;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern UB* rmaEvalDelays(UB* pcode, scalar val);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void rmaSetupRTLoopReportPtrs(UP* funcs, UP* rtlFuncs, U cnt, U cntDummy, UP end);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void SDaicbForHsimNoFlagScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlagStrengthScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlag2(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimWithFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlagFrcRel(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimNoFlagFrcRel2(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void VcsHsimValueChangeCB(void* pRmaDaiCg, void* pValue, unsigned int valueFormat);
extern U isNonDesignNodeCallbackList(void* pRmaDaiCg);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void VVrpNonEventNonRegdScalarForHsimOptCbkMemopt(void* ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimCbkMemOptNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void dumpRootVcdCg(RmaRootVcdCg* pRootVcd, scalar val);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern RP rmaTestCg(RP pcode, U vt, UB* value);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void doMpdCommon(MPS* pmps);
extern TimeStamp GET_DIFF_DELAY_FUNC(TimeStamp ts);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0Raptor(UB *e);
extern void sched0lq(EBLK *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void hsopt_sched0u_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, EBLK *e);
extern void sched0u(UB *e);
extern void sched0u_th(struct dummyq_struct *pq, UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, EBLK *e);
extern void FsdbReportClkGlitch(UB*,U);
extern void AddToClkGLitchArray(EBLK*);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void SchedSemiLerNBA(UB* peblk, U partId);
extern void NBA_Semiler(void *ip, void *pNBS);
extern void sched0sd_hsim(UB* peblk);
extern void sched0sd_hsim_PRL(UB* peblk);
extern void sched0lq_parallel_clk(EBLK* peblk);
extern void doFgpRaceCheck(UB* pcode, UB* p, U flag);
extern void doSanityLvlCheck();
extern void sched0lq_parallel_ova(EBLK* peblk);
extern void sched0lq_parallel_ova_precheck(EBLK* peblk);
extern void rmaDlpEvalSeqPrim(UB* peblk, UB val, UB preval);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void appendTransEventS(RmaTransEventHdr* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimCountXEdges(void* record,  scalar s);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern U pvcsGetPartId();
extern void HsimPVCSPartIdCheck(U instNo);
extern void debug_func(U partId, struct dummyq_struct* pQ, EBLK* EblkLastEventx); 
extern struct dummyq_struct* pvcsGetQ(U thid);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEvent(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt, RmaTimeStamp tsNochange);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset, U gd_info, U encodeInPcode, void* propValue);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void *VCSCalloc(size_t size, size_t count);
extern void *VCSMalloc(size_t size);
extern void VCSFree(void *ptr);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWLe32(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWToE(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecACg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void rmaProcessPvcsCcn(UB* pcode, scalar val);
extern void rmaProcessPvcsCcnE(UB* pcode, scalar* val);
extern void rmaProcessPvcsCcnW(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnV(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnCompiledS(UB* pcode, U offset, scalar ibnval);
extern void rmaProcessPvcsCcnCompiledV(UB* pcode, U offset, vec32* pval);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaCountRaptorBits(void* pval, void* pvalPrev, U cbits, U vt);
extern void setHsimFunc(void* ip);
extern void unsetHsimFunc(void* ip);
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void VcsRciRtl(RP pcode);
extern U fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U fLoopReportRT;
extern void rtSched0LoopDectDumpProcess(void* e, void* rtn, void* PQ);
extern void pushHsimRtnCtxt(void* pcode);
extern void popHsimRtnCtxt();
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern void rmaScheduleNbaGate(RP pcode, scalar val);
extern void rmaEvalRtlEdgeLoads(RmaRtlEdgeBlockHdr *phdr, US clkEdge, scalar clkVal, scalar prevClkVal, scalar val4,   scalar prevval4, scalar master4val);
extern void rmaEvaluateDynamicGateLoadsCg(RP p, scalar s);
extern void rmaEvaluateFusedWithDynamicGateLoadsCg(RP p, scalar s);
extern void rmaScheduleGatedClockEdgeLoad(UB* p, US* ea, U fNonEdgeLoad, UB* plist, UB* pprevlist, scalar v);
extern void rmaRemoveNonEdgeLoads(UB* pcode);
extern void rmaRecordEvents(HsimNodeRecord *pnr);
extern void handlePCBs(UB* p, U i);
extern void markMasterClkOvaLists(U fdbs, RP p);
extern void rmaChildClockPropAfterWrite(UB* p);
extern void rmaSchedChildClockPropAfterWrite(UB* p, UB* pmasterList, UB val);
extern void HDLCosimProcessDUTInputChange(U inputId, void* val);
extern void rmaChangeListForMovedGates(UB clkVal, UB f10Edge, UB* subMasterVal, UB* plist, RP* p, U count);
extern void rmaEvalSeqPrimLoadsByteArray(UB* pcode, UB val, UB prevval4);
extern void rmaEvalSeqPrimLoadsByteArrayX(UB* pcode, UB val, UB prevval4);
extern void vcsRmaEvalSeqPrimLoadsByteArraySCT(UB* pcode, UB val, UB prevval4, U c);
extern void vcsAbortForBadEBlk(void);
extern scalar edgeChangeLookUp[4][4];
extern void Wsvvar_sched_virt_intf_eval(RP* ptr);
extern void vcs_hwcosim_drive_dut_scalar(uint id, char val);
extern void vcs_hwcosim_drive_dut_vector_4state(uint id, vec32* val);
extern U vcs_rmaGetClkValForSeqUdpLayoutOnClkOpt(UB* poutput);
extern U rmaIsS2State(scalar s);
extern U rmaIsV2State(vec32* pval, U cbits);
extern U rmaIsW2State(vec32* pval, U cbits);
extern U rmaIsE2State(scalar* pval, U cbits);
extern void rmaUpdateRecordFor2State(HsimNodeRecord* record, U f2state);
typedef void (*FuncPtr)();
static inline U asm_bsf (U in)
{
#if defined(linux)
    U out;
#if !defined(__aarch64__)
    asm ("movl %1, %%eax; bsf %%eax, %%eax; movl %%eax, %0;"
        :"=r"(out)
        :"r"(in)
        :"%eax"
        );
#else
    out = ffs(in) - 1;
#endif
    return out;
#else
    return 0;
#endif
}


#ifdef __cplusplus
extern "C" {
#endif
void  hsG_0__0 (struct dummyq_struct * I1248, EBLK  * I1242, U  I672);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

